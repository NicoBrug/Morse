/*****************************************************************//**
 * Generated by Morse IDL to UE Translator.
 * @file   MRSGeometry.h
 * @brief  File containing data structures and the definition of the message generated from the IDL.
 *         Idl Type : MRSGeometry.idl
 *         
 * @author Nicolas B.
 * @date   December 2023
 * @copyright Copyright 2023 Nicolas Brugie. All rights reserved.
 *********************************************************************/

#pragma once 
#include "CoreMinimal.h" 
#include "Topic/TopicProxy.h"
#include "Utils/MRSConvertUtils.h"


#include "CycloneImpl/Math/Geometry.h"

#include "MRSGeometry.generated.h" 



USTRUCT(Blueprintable)
struct FMRSQuaternion
{
    GENERATED_BODY()

    FMRSQuaternion()
    {

    };

    
    UPROPERTY(EditAnywhere, BlueprintReadWrite)
    double W = 0.0;
    
    UPROPERTY(EditAnywhere, BlueprintReadWrite)
    double X = 0.0;
    
    UPROPERTY(EditAnywhere, BlueprintReadWrite)
    double Y = 0.0;
    
    UPROPERTY(EditAnywhere, BlueprintReadWrite)
    double Z = 0.0;
    

    void DDSToUE(const Unreal_Math_Quaternion& InData);
    void UEToDDS(Unreal_Math_Quaternion& OutData);
};

DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FMRSQuaternionCallback, const FMRSQuaternion, Data);

UCLASS(BlueprintType, Blueprintable)
class MORSEDATAMODEL_API UQuaternion_TopicProxy : public UTopicProxy
{
    GENERATED_BODY()

    UPROPERTY(BlueprintAssignable)
    FMRSQuaternionCallback OnDataChanged;

    /** Begin implement TopicProxy Interface */
    virtual void Initialize() override;
    virtual void Terminate() override;
    virtual const dds_topic_descriptor_t* GetTypeDesc() override;
    virtual void* Get() override;
    virtual void ExecuteMessageCallback() override;
    /** End implement TopicProxy Interface */

    UFUNCTION(BlueprintCallable)
    void GetData(FMRSQuaternion& Output);

    UFUNCTION(BlueprintCallable)
    void SetData(FMRSQuaternion Input);

private:
    Unreal_Math_Quaternion* Data;
};

USTRUCT(Blueprintable)
struct FMRSVector3
{
    GENERATED_BODY()

    FMRSVector3()
    {

    };

    
    UPROPERTY(EditAnywhere)
    double X = 0.0;
    
    UPROPERTY(EditAnywhere)
    double Y = 0.0;
    
    UPROPERTY(EditAnywhere)
    double Z = 0.0;
    

    void DDSToUE(const Unreal_Math_Vector3& InData);
    void UEToDDS(Unreal_Math_Vector3& OutData);
};

DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FMRSVector3Callback, const FMRSVector3, Data);

UCLASS(BlueprintType, Blueprintable)
class MORSEDATAMODEL_API UVector3_TopicProxy : public UTopicProxy
{
    GENERATED_BODY()

    UPROPERTY(BlueprintAssignable)
    FMRSVector3Callback OnDataChanged;

    /** Begin implement TopicProxy Interface */
    virtual void Initialize() override;
    virtual void Terminate() override;
    virtual const dds_topic_descriptor_t* GetTypeDesc() override;
    virtual void* Get() override;
    virtual void ExecuteMessageCallback() override;
    /** End implement TopicProxy Interface */

    UFUNCTION(BlueprintCallable)
    void GetData(FMRSVector3& Output);

    UFUNCTION(BlueprintCallable)
    void SetData(FMRSVector3 Input);

private:
    Unreal_Math_Vector3* Data;
};

USTRUCT(Blueprintable)
struct FMRSAccel
{
    GENERATED_BODY()

    FMRSAccel()
    {

    };

    
    UPROPERTY(EditAnywhere)
    FMRSVector3 Linear;
    
    UPROPERTY(EditAnywhere)
    FMRSVector3 Angular;
    

    void DDSToUE(const Unreal_Math_Accel& InData);
    void UEToDDS(Unreal_Math_Accel& OutData);
};

DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FMRSAccelCallback, const FMRSAccel, Data);

UCLASS(BlueprintType, Blueprintable)
class MORSEDATAMODEL_API UAccel_TopicProxy : public UTopicProxy
{
    GENERATED_BODY()

    UPROPERTY(BlueprintAssignable)
    FMRSAccelCallback OnDataChanged;

    /** Begin implement TopicProxy Interface */
    virtual void Initialize() override;
    virtual void Terminate() override;
    virtual const dds_topic_descriptor_t* GetTypeDesc() override;
    virtual void* Get() override;
    virtual void ExecuteMessageCallback() override;
    /** End implement TopicProxy Interface */

    UFUNCTION(BlueprintCallable)
    void GetData(FMRSAccel& Output);

    UFUNCTION(BlueprintCallable)
    void SetData(FMRSAccel Input);

private:
    Unreal_Math_Accel* Data;
};

USTRUCT(Blueprintable)
struct FMRSVector2D
{
    GENERATED_BODY()

    FMRSVector2D()
    {

    };

    
    UPROPERTY(EditAnywhere)
    double X = 0.0;
    
    UPROPERTY(EditAnywhere)
    double Y = 0.0;
    

    void DDSToUE(const Unreal_Math_Vector2D& InData);
    void UEToDDS(Unreal_Math_Vector2D& OutData);
};

DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FMRSVector2DCallback, const FMRSVector2D, Data);

UCLASS(BlueprintType, Blueprintable)
class MORSEDATAMODEL_API UVector2D_TopicProxy : public UTopicProxy
{
    GENERATED_BODY()

    UPROPERTY(BlueprintAssignable)
    FMRSVector2DCallback OnDataChanged;

    /** Begin implement TopicProxy Interface */
    virtual void Initialize() override;
    virtual void Terminate() override;
    virtual const dds_topic_descriptor_t* GetTypeDesc() override;
    virtual void* Get() override;
    virtual void ExecuteMessageCallback() override;
    /** End implement TopicProxy Interface */

    UFUNCTION(BlueprintCallable)
    void GetData(FMRSVector2D& Output);

    UFUNCTION(BlueprintCallable)
    void SetData(FMRSVector2D Input);

private:
    Unreal_Math_Vector2D* Data;
};

USTRUCT(Blueprintable)
struct FMRSTransform
{
    GENERATED_BODY()

    FMRSTransform()
    {

    };

    
    UPROPERTY(EditAnywhere)
    FMRSQuaternion Rotation;
    
    UPROPERTY(EditAnywhere)
    FMRSVector3 Scale3d;
    
    UPROPERTY(EditAnywhere)
    FMRSVector3 Translation;
    

    void DDSToUE(const Unreal_Math_Transform& InData);
    void UEToDDS(Unreal_Math_Transform& OutData);
};

DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FMRSTransformCallback, const FMRSTransform, Data);

UCLASS(BlueprintType, Blueprintable)
class MORSEDATAMODEL_API UTransform_TopicProxy : public UTopicProxy
{
    GENERATED_BODY()

    UPROPERTY(BlueprintAssignable)
    FMRSTransformCallback OnDataChanged;

    /** Begin implement TopicProxy Interface */
    virtual void Initialize() override;
    virtual void Terminate() override;
    virtual const dds_topic_descriptor_t* GetTypeDesc() override;
    virtual void* Get() override;
    virtual void ExecuteMessageCallback() override;
    /** End implement TopicProxy Interface */

    UFUNCTION(BlueprintCallable)
    void GetData(FMRSTransform& Output);

    UFUNCTION(BlueprintCallable)
    void SetData(FMRSTransform Input);

private:
    Unreal_Math_Transform* Data;
};